{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appservicePlanName": {
            "type": "string",
            "metadata": {
                 "description": "Name of the App Service Plan"
             }
         },
         "appserviceName": {
            "type": "string",
            "metadata": {
                 "description": "Name of the App Service"
             }
         },         
        "botserviceName": {
            "type": "string",
            "metadata": {
                 "description": "Name of the Bot Service"
             }
         },
        "botserviceDisplayName": {
            "type": "string",
            "metadata": {
                 "description": "Display Name of the Bot"
             }
         },
        "botserviceTier": {
            "type": "string",
            "metadata": {
                 "description": "Bot service Tier plan"
             }
         },
	"luisName": {
            "type": "string",
            "defaultValue": "luisservicearm"
        },
        "luisSkuName": {
            "type": "string",
            "defaultValue": "F0"
        },
        "accountName": {
            "type": "string",
            "defaultValue": "[concat('cosmos-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Cosmos DB account name"
            }
        },
	"storageaccountName": {
	     "type": "string",
	     "defaultValue": "[concat('botstorage', uniqueString(resourceGroup().id))]",
	     "metadata": {
		"description": "Storage account"
	    }
        },
        "databaseName": {
            "type": "string",
	    "defaultValue": "botdb",
            "metadata": {
                "description": "The name for the Core (SQL) database"
            }
        },
	"containerName": {
            "type": "string",
            "defaultValue": "botcontainer",
            "metadata": {
                "description": "The name for the Core (SQL) API container"
            }
        },
	"throughput": {
            "type": "int",
            "defaultValue": 400,
            "minValue": 400,
            "maxValue": 1000000,
            "metadata": {
                "description": "The throughput for the container"
            }            
        },
	"qnaAppName": {
	    "type": "string",	
            "defaultValue": "qnaTestDevArm"
        },
	"qnaappservicePlan": {
	    "type": "string",	
            "defaultValue": "qnaappserviceplanarm"
        },
        "location": {
	    "type": "string",	
            "defaultValue": "westus"
        },
        "location3": {
	    "type": "string", 	
            "defaultValue": "westeurope"
        },
        "location4": {
	    "type": "string",	
            "defaultValue": "westeurope"
        },
        "sku": {
	    "type": "string",	
            "defaultValue": "F0"
        },
        "sku2": {
	    "type": "string",	
            "defaultValue": "free"
        },
        "searchHostingMode": {
	    "type": "string",	
            "defaultValue": "Default"
        },
	"seed": { "type": "string", "defaultValue": "0" }
    },
    "variables": { 
    "uniqueBase": "[toLower(uniqueString(parameters('seed'), resourceGroup().id, deployment().name))]", 
    "temp": "[concat(variables('uniqueBase') , variables('uniqueBase'), substring(variables('uniqueBase'), 0, 10))]", 
     "g": "[replace(variables('temp'), 'g', '0')]", 
     "h": "[replace(variables('g'), 'h', '1')]", 
     "i": "[replace(variables('h'), 'i', '2')]", 
     "j": "[replace(variables('i'), 'j', '3')]", 
     "k": "[replace(variables('j'), 'k', '4')]", 
     "l": "[replace(variables('k'), 'l', '5')]", 
     "m": "[replace(variables('l'), 'm', '6')]", 
     "n": "[replace(variables('m'), 'n', '7')]", 
     "o": "[replace(variables('n'), 'o', '8')]", 
     "p": "[replace(variables('o'), 'p', '9')]", 
     "q": "[replace(variables('p'), 'q', 'a')]", 
     "r": "[replace(variables('q'), 'r', 'b')]", 
     "s": "[replace(variables('r'), 's', 'c')]", 
     "t": "[replace(variables('s'), 't', 'd')]", 
     "u": "[replace(variables('t'), 'u', 'e')]", 
     "v": "[replace(variables('u'), 'v', 'f')]", 
     "w": "[replace(variables('v'), 'w', '0')]", 
     "x": "[replace(variables('w'), 'x', '1')]", 
     "y": "[replace(variables('x'), 'y', '2')]", 
     "z": "[replace(variables('y'), 'z', '3')]", 
     "tempguid": "[concat(substring(variables('z'), 0, 8), '-', substring(variables('z'), 9, 4), '-', substring(variables('z'), 14, 4), '-', substring(variables('z'), 19, 4), '-', substring(variables('z'), 24, 12))]",
     "botendpoint" : "[concat('https://', parameters('appserviceName'), '.azurewebsites.net/api/messages')]",
     "accountName": "[toLower(parameters('accountName'))]",
     "puredAzureSearchName": "[replace(parameters('qnaAppName'), '-', '')]",
     "normalizedAzureSearchName": "[if(greater(length(variables('puredAzureSearchName')), 40), substring(variables('puredAzureSearchName'), sub(length(variables('puredAzureSearchName')), 40), 40) , variables('puredAzureSearchName'))]",
     "azureSearchName": "[toLower(concat(variables('normalizedAzureSearchName'), '-as', uniqueString(resourceGroup().id, variables('normalizedAzureSearchName'), parameters('sku2'), parameters('location4'), parameters('searchHostingMode'))))]"
   }, 
    "resources": [ 
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2016-09-01",
            "name": "[parameters('appservicePlanName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "F1",
                "capacity": 1
            },
            "properties": {
                "name": "[parameters('appservicePlanName')]"
            }
        },     
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2015-08-01",
            "name": "[parameters('appserviceName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', parameters('appservicePlanName'))]"
            }
        },
	{
	    "type": "Microsoft.BotService/botServices",
            "name": "[parameters('botserviceName')]",
            "apiVersion": "2018-07-12",
            "location": "global",
            "sku": {
                "name": "[parameters('botserviceTier')]"
            },
            "kind": "bot",
            "properties": {
                "displayName": "[parameters('botserviceDisplayName')]",
                "endpoint": "[variables('botendpoint')]",
                "msaAppId": "[variables('tempguid')]"               
            }
        },
	{
            "type": "Microsoft.CognitiveServices/accounts",
            "name": "[parameters('luisName')]",
            "location": "[resourceGroup().location]",
	    "apiVersion": "2017-04-18",
            "kind": "LUIS",
            "sku": {
                "name": "[parameters('luisSkuName')]"
                },
            "properties": {}
        },
	{
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2020-03-01",
            "name": "[parameters('accountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "enableFreeTier": true,
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2020-03-01",
            "name": "[concat(variables('accountName'), '/', parameters('databaseName'))]",
            "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('accountName'))]" ],
            "properties": {
                "resource": {
                    "id": "[parameters('databaseName')]"
                },
                "options": {"throughput": 400}
            }
        },
	{
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "name": "[concat(variables('accountName'), '/', parameters('databaseName'), '/', parameters('containerName'))]",
            "apiVersion": "2020-03-01",
            "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('accountName'), parameters('databaseName'))]" ],
            "properties":
            {
                "resource":{
                    "id":  "[parameters('containerName')]",
                    "partitionKey": {
                        "paths": ["/myPartitionKey"],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [{ "path": "/*" } ],
                        "excludedPaths": [{ "path": "/myPathToNotIndex/*" } ]
                    }
                },
                "options": { "throughput": "[parameters('throughput')]" }
            }
	},
	{ 
           "type": "Microsoft.Storage/storageAccounts", 
           "name": "[parameters('storageaccountName')]", 
           "sku": { 
               "name": "Standard_LRS" 
           }, 
           "apiVersion": "2018-02-01", 
           "location": "[resourceGroup().location]", 
           "properties": {} 
       },
       {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2016-09-01",
            "name": "[parameters('qnaappservicePlan')]",
            "location": "[parameters('location3')]",
            "sku": {
                "name": "F1",
                "capacity": 1
            },
            "properties": {
                "name": "[parameters('qnaappservicePlan')]"
            }
       },
       {
            "type": "Microsoft.CognitiveServices/accounts",
            "kind": "QnAMaker",
            "name": "[parameters('qnaAppName')]",
            "apiVersion": "2017-04-18",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('sku')]"
            },
            "properties": {
                "apiProperties": {
                    "qnaRuntimeEndpoint": "[concat('https://',reference(resourceId('Microsoft.Web/sites', parameters('qnaAppName'))).hostNames[0])]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('qnaAppName'))]",
                "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]"
            ]
        },
        {
            "name": "[variables('azureSearchName')]",
            "type": "Microsoft.Search/searchServices",
            "apiVersion": "2015-08-19",
            "location": "[parameters('location4')]",
            "tags": {},
            "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "[parameters('searchHostingMode')]"
            },
            "sku": {
                "name": "[parameters('sku2')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[parameters('qnaAppName')]",
            "location": "[parameters('location3')]",
            "properties": {
                "enabled": true,
                "siteConfig": {
                    "cors": {
                        "allowedOrigins": [
                            "*"
                        ]
                    }
                },
                "name": "[parameters('qnaAppName')]",
                "serverFarmId": "[concat('/subscriptions/', subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', parameters('qnaappservicePlan'))]",
                "hostingEnvironment": ""
            },
            "tags": {
                "[concat('hidden-related:', '/subscriptions/', subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', parameters('qnaappservicePlan'))]": "empty"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('qnaappservicePlan'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('qnaAppName'))]",
                        "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]"
                    ],
                    "properties": {
                        "AzureSearchName": "[variables('azureSearchName')]",
                        "AzureSearchAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').primaryKey]",
                        "PrimaryEndpointKey": "[concat(parameters('qnaAppName'), '-PrimaryEndpointKey')]",
                        "SecondaryEndpointKey": "[concat(parameters('qnaAppName'), '-SecondaryEndpointKey')]",
                        "DefaultAnswer": "No good match found in KB.",
                        "QNAMAKER_EXTENSION_VERSION": "latest"
                    }
                }
            ]
        }
    ],
    "outputs": {
		"webAppName": {
		"type": "string",
		"value": "[parameters('appserviceName')]"
		}
	}
}
